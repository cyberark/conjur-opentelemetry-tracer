#!/bin/bash

set -euo pipefail

####
# Functions to generate version numbers for this project
####

# Set up VERSION file for local development
if [ ! -f "VERSION" ]; then
  echo -n "0.0.dev" > VERSION
fi
readonly VERSION_FILE="$(<VERSION)"

function git_version() {
  echo "$VERSION_FILE"
}

function git_commit_short() {
  git rev-parse --short=8 HEAD
}

function full_version_tag() {
  echo "$(git_version)-$(git_commit_short)"
}


function retrieve_cyberark_ca_cert() {
  # On CyberArk dev laptops, golang module dependencies are downloaded with a
  # corporate proxy in the middle. For these connections to succeed we need to
  # configure the proxy CA certificate in build containers.
  #
  # To allow this script to also work on non-CyberArk laptops where the CA
  # certificate is not available, we update container certificates based on
  # a (potentially empty) certificate directory, rather than relying on the
  # CA file itself.
  mkdir -p "$(repo_root)/build_ca_certificate"

  # Only attempt to extract the certificate if the security
  # command is available.
  #
  # The certificate file must have the .crt extension to be imported
  # by `update-ca-certificates`.
  if command -v security &> /dev/null
  then
    security find-certificate \
      -a -c "CyberArk Enterprise Root CA" \
      -p > build_ca_certificate/cyberark_root.crt
  fi
}

repo_root() {
  git rev-parse --show-toplevel
}
